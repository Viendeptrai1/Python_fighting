import streamlit as st

class RegressionComponent:
    def __init__(self, phan_tich_va_du_doan):
        self.phan_tich_va_du_doan = phan_tich_va_du_doan

    def ve_hoi_quy_va_du_doan(self):
        st.write("### üîç Ph√¢n t√≠ch h·ªìi quy")
        
        analysis_type = st.radio(
            "Ch·ªçn lo·∫°i ph√¢n t√≠ch:",
            ["H·ªìi quy m·ªôt ƒë·∫∑c tr∆∞ng", "H·ªìi quy nhi·ªÅu ƒë·∫∑c tr∆∞ng"],
            horizontal=True
        )

        if analysis_type == "H·ªìi quy m·ªôt ƒë·∫∑c tr∆∞ng":
            self._single_feature_regression()
        else:
            self._multi_feature_regression()
            
        self._show_prediction_form()

    def _single_feature_regression(self):
        feature = st.selectbox(
            "Ch·ªçn ƒë·∫∑c tr∆∞ng ph√¢n t√≠ch:",
            ["age", "bmi", "children"],
            help="Ch·ªçn ƒë·∫∑c tr∆∞ng ƒë·ªÉ ph√¢n t√≠ch m·ªëi quan h·ªá v·ªõi gi√° b·∫£o hi·ªÉm"
        )
        
        # Th√™m l·ª±a ch·ªçn ph√¢n nh√≥m
        group_by = st.checkbox("Ph√¢n t√≠ch theo nh√≥m", 
                             help="Ch·ªçn ƒë·ªÉ ph√¢n t√≠ch ri√™ng cho t·ª´ng nh√≥m ƒë·ªëi t∆∞·ª£ng")
        
        if group_by:
            group_type = st.selectbox(
                "Ch·ªçn lo·∫°i nh√≥m:",
                ["smoker", "region"],
                help="Ch·ªçn ti√™u ch√≠ ph√¢n nh√≥m d·ªØ li·ªáu"
            )

            if group_type == "smoker":
                group_value = st.radio(
                    "Ch·ªçn nh√≥m ƒë·ªëi t∆∞·ª£ng:",
                    ["Ng∆∞·ªùi h√∫t thu·ªëc", "Ng∆∞·ªùi kh√¥ng h√∫t thu·ªëc"],
                    horizontal=True
                )
                filter_value = 'yes' if group_value == "Ng∆∞·ªùi h√∫t thu·ªëc" else 'no'
                du_lieu = self.phan_tich_va_du_doan.du_lieu[
                    self.phan_tich_va_du_doan.du_lieu['smoker'] == filter_value
                ]
            else:
                group_value = st.radio(
                    "Ch·ªçn khu v·ª±c:",
                    ["southwest", "southeast", "northwest", "northeast"],
                    horizontal=True
                )
                du_lieu = self.phan_tich_va_du_doan.du_lieu[
                    self.phan_tich_va_du_doan.du_lieu['region'] == group_value
                ]
        else:
            du_lieu = self.phan_tich_va_du_doan.du_lieu
        
        is_manual = st.checkbox("S·ª≠ d·ª•ng h·ªìi quy th·ªß c√¥ng", 
                              help="Ch·ªçn ƒë·ªÉ nh·∫≠p h·ªá s·ªë a, b th·ªß c√¥ng")
        
        if is_manual:
            col1, col2 = st.columns(2)
            with col1:
                a = st.number_input("H·ªá s·ªë a", value=1.0)
            with col2:
                b = st.number_input("H·ªá s·ªë b", value=0.0)
        else:
            normalization_method = st.selectbox(
                "Ch·ªçn ph∆∞∆°ng ph√°p chu·∫©n h√≥a:",
                ["standard", "minmax"],
                help="Standard: chu·∫©n h√≥a v·ªÅ ph√¢n ph·ªëi chu·∫©n, MinMax: chu·∫©n h√≥a v·ªÅ kho·∫£ng [0,1]"
            )
        
        if st.button("Th·ª±c hi·ªán ph√¢n t√≠ch"):
            try:
                if is_manual:
                    self.phan_tich_va_du_doan.hoi_quy_tuyen_tinh_1_dac_trung_thu_cong(
                        feature,
                        du_lieu,
                        a, b
                    )
                else:
                    self.phan_tich_va_du_doan.hoi_quy_tuyen_tinh_1_dac_trung_su_dung_ham(
                        feature,
                        du_lieu,
                        normalization_method
                    )
            except Exception as e:
                st.error(f"L·ªói khi th·ª±c hi·ªán ph√¢n t√≠ch: {str(e)}")

    def _multi_feature_regression(self):
        if st.button("Th·ª±c hi·ªán ph√¢n t√≠ch"):
            try:
                self.phan_tich_va_du_doan.hoi_quy_tuyen_tinh_nhieu_dac_trung_su_dung_ham(
                    ['age', 'bmi', 'children'],
                    self.phan_tich_va_du_doan.du_lieu
                )
            except Exception as e:
                st.error(f"L·ªói khi th·ª±c hi·ªán ph√¢n t√≠ch: {str(e)}")

    def _show_prediction_form(self):
        st.write("### üéØ D·ª± ƒëo√°n gi√° b·∫£o hi·ªÉm")
        with st.form("prediction_form"):
            col1, col2, col3 = st.columns(3)
            
            with col1:
                age = st.number_input("Tu·ªïi", min_value=18, max_value=100, value=30)
                sex = st.selectbox("Gi·ªõi t√≠nh", ['male', 'female'])
            
            with col2:
                bmi = st.number_input("BMI", min_value=10.0, max_value=50.0, value=25.0)
                smoker = st.selectbox("H√∫t thu·ªëc", ['no', 'yes'])
            
            with col3:
                children = st.number_input("S·ªë con", min_value=0, max_value=10, value=0)
                region = st.selectbox("Khu v·ª±c", ['southwest', 'southeast', 'northwest', 'northeast'])

            if st.form_submit_button("D·ª± ƒëo√°n"):
                try:
                    input_data = {
                        'age': age,
                        'sex': sex,
                        'bmi': bmi,
                        'children': children,
                        'smoker': smoker,
                        'region': region
                    }
                    prediction = self.phan_tich_va_du_doan.du_doan(input_data)
                    st.success(f"Gi√° b·∫£o hi·ªÉm d·ª± ƒëo√°n: ${prediction:,.2f}")
                except Exception as e:
                    st.error(f"L·ªói khi d·ª± ƒëo√°n: {str(e)}")
                    
